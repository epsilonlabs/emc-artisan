context Class {
	critique NameShouldStartWithUpperCase {
    	check : self.name.substring(0,1) = self.name.substring(0,1).toUpperCase()   
    	message : "The name of class " + self.name + " (" + self.Id + ") should start with an upper-case letter"
 	}
}

context Attribute {
	critique NameShouldNotStartWithUpperCase {
    	check : self.name.substring(0,1) = self.name.substring(0,1).toLowerCase()   
    	message : "The name of attribute " + self.name + " (" + self.Id + ") should not start with an upper-case letter"
 	}
}

context Class {
	critique OperationsShouldeBeLessThanThree {
		check : self.`operation`.size <= 3
		message : "Class " + self.name + " (" + self.Id + ") has more than 3 operations"
	}
}

context Operation {
	critique OperationsShouldHaveLessThanSevenParameters {
		check : self.parameter.size <= 3
		message : "Operation " + self.name + " (" + self.Id + ") has more than 7 parameters"
	}
}

context Package {
	critique PackagesShouldNotBeEmpty {
		check : self.ownedcontents.size > 0
		message : "Package " + self.name + " (" + self.Id + ") is empty"
	}
}

context Class { 
	constraint MultipleInheritanceIsNotAllowed {
		check : self.superclass.size - self.superclass.select(i|i.isInterface.equals("TRUE")).size() < 1
		message : "Class " + self.name + " (" + self.Id + ") has multiple inheritance"
	}
}

context Association {
	constraint AggregateStartMultiplicityShouldBeAlwaysOne {
		check {
			if (self.aggregate.equals("Start") and (not self.EndMultiplicityUML.equals("1"))) {
				return false;
			}
			return true;
		}
		message : "Aggregation " + self.name + " (" + self.Id + ") has multiplicity different than 1."
	}
}

context Association {
	constraint LowerBoundShouldBeSmallerThanUpperBoundStart {
		check {
			var startMultiplicity = self.startMultiplicityUML;
			if (startMultiplicity.matches("(-)?[0-9]+\\.{2}(-)?[0-9]+")) {
				var lowerBound = startMultiplicity.split("\\.{2}").get(0);
				var upperBound = startMultiplicity.split("\\.{2}").get(1);
				if (lowerBound.asInteger() > upperBound.asInteger()) {
					return false;
				}
			}
			return true;
		}
		message : "Lower bound is bigger than upper bound in the start of association " + self.name + " (" + self.Id + ")"
	}
}

context Association {
	constraint LowerBoundShouldBeSmallerThanUpperBoundEnd {
		check {
			var endMultiplicity = self.endMultiplicityUML;
			if (endMultiplicity.matches("(-)?[0-9]+\\.{2}(-)?[0-9]+")) {
				var lowerBound = endMultiplicity.split("\\.{2}").get(0);
				var upperBound = endMultiplicity.split("\\.{2}").get(1);
				if (lowerBound.asInteger() > upperBound.asInteger()) {
					return false;
				}
			}
			return true;
		}
		message : "Lower bound is bigger than upper bound in the end of association " + self.name + " (" + self.Id + ")"
	}
}

context Association {
	constraint UpperBoundShouldBePositiveStart {
		check {
			var startMultiplicity = self.startMultiplicityUML;
			if (startMultiplicity.matches("(-)?[0-9]+\\.{2}(-)?[0-9]+")) {
				var upperBound = startMultiplicity.split("\\.{2}").get(1);
				if (upperBound.asInteger() <= 0) {
					return false;
				}
			}
			return true;
		}
		message : "Upper bound in the start of association " + self.name + " (" + self.Id + ") should be a positive integer"
	}
}

context Association {
	constraint UpperBoundShouldBePositiveEnds {
		check {
			var endMultiplicity = self.endMultiplicityUML;
			if (endMultiplicity.matches("(-)?[0-9]+\\.{2}(-)?[0-9]+")) {
				var upperBound = endMultiplicity.split("\\.{2}").get(1);
				if (upperBound.asInteger() <= 0) {
					return false;
				}
			}
			return true;
		}
		message : "Upper bound in the end of association " + self.name + " (" + self.Id + ") should be a positive integer"
	}
}